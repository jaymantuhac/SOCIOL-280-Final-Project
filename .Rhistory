color = "blue",
size = 1) +
labs(title = "Outdegree Distribution",
x = "Outdegree",
y = "Frequency")
indegree <- sna::degree(sociomatrix, cmode = 'indegree')
mean(indegree)
hist(indegree)
# No histogram for indegree, may be too similar to the outdegree
sna::betweenness(sociomatrix, cmode = "directed")
as.data.frame(outdegree) %>%
ggplot(aes(x = outdegree)) +
geom_histogram(color = "black",
fill = "white") +
geom_vline(aes(xintercept = mean(outdegree)),
color = "blue",
size = 1) +
labs(title = "Outdegree Distribution",
x = "Outdegree",
y = "Frequency")
table(diag(mat), useNA='always')  # are there any self-ties - there are 2 in this
# examine the sociomatrix
table(mat, useNA='always')  # are the number of ties what you expect?
sna::betweenness(sociomatrix, cmode = "directed")
gplot(sociomatrix, label=rawIDs, vertex.col = zip) #Visaulization reveals a large scale outbreak at zip code 30338
# Dyad distributions
dyad.census(sociomatrix)
dyad.census
?dyad.census
# Dyad distributions
sna::dyad.census(sociomatrix)
?centralization
sna::centralization(sociomatrix, degree)
clique.census(sociomatrix, clique.comembership = "bysize")
clique_census <- clique.census(sociomatrix, clique.comembership = "bysize")
View(clique_census)
clique_census$clique.count
clique_census$cliques
as.data.frame(outdegree) %>%
ggplot(aes(x = outdegree)) +
geom_histogram(color = "black",
fill = "white") +
geom_vline(aes(xintercept = mean(outdegree)),
color = "blue",
size = 1) +
labs(title = "Outdegree Distribution",
x = "Outdegree",
y = "Frequency")
gplot(sociomatrix, label=rawIDs, vertex.col = zip) #Visaulization reveals a large scale outbreak at zip code 30338
gplot(sociomatrix, label=rawIDs, vertex.col = zip) #Visaulization reveals a large scale outbreak at zip code 30338
#Load packages
library(pacman)
pacman::p_load(ggplot2,
sna,
statnet,
RSiena,
psych,
car,
stringr,
gdata,
cluster,
reshape2,
dplyr,
openxlsx,
gridExtra,
influenceR,
igraph,
cowplot,
ggpubr,
magick,
ergMargins,
tnet,
tidyverse)
gplot(sociomatrix, label=rawIDs, vertex.col = zip) #Visaulization reveals a large scale outbreak at zip code 30338
as.data.frame(outdegree) %>%
ggplot(aes(x = outdegree)) +
geom_histogram(color = "black",
fill = "white") +
geom_vline(aes(xintercept = mean(outdegree)),
color = "blue",
size = 1) +
labs(title = "Outdegree Distribution",
x = "Outdegree",
y = "Frequency")
#Load packages
library(pacman)
pacman::p_load(ggplot2,
sna,
statnet,
RSiena,
psych,
car,
stringr,
gdata,
cluster,
reshape2,
dplyr,
openxlsx,
gridExtra,
influenceR,
igraph,
cowplot,
ggpubr,
magick,
ergMargins,
tnet,
tidyverse)
gplot(sociomatrix, label=rawIDs, vertex.col = zip) #Visaulization reveals a large scale outbreak at zip code 30338
zip <- rep("NA", length.out = N)
zip[nodes[, 'Zip.Code'] == 30306] <- '#9c482f'
zip[nodes[, 'Zip.Code'] == 30324] <- '#e63192'
zip[nodes[, 'Zip.Code'] == 30329] <- '#af0efa'
zip[nodes[, 'Zip.Code'] == 30338] <- '#771358'
zip[nodes[, 'Zip.Code'] == 30340] <- '#649832'
zip[nodes[, 'Zip.Code'] == 30341] <- '#e6d2b6'
zip[nodes[, 'Zip.Code'] == 30602] <- '#efcf4f'
zip[nodes[, 'Zip.Code'] == 30605] <- '#69e32b'
zip[nodes[, 'Zip.Code'] == 32606] <- '#490362'
zip[nodes[, 'Zip.Code'] == 35064] <- '#8b3292'
zip[nodes[, 'Zip.Code'] == 37116] <- '#4f06a8'
gplot(sociomatrix, label=rawIDs, vertex.col = zip) #Visaulization reveals a large scale outbreak at zip code 30338
hist(outdegreenodes[nodes[,'Zip.Code'] == 30338])
hist(outdegree(nodes[nodes[,'Zip.Code'] == 30338]))
outdegree <- sna::degree(sociomatrix, cmode = 'outdegree')
View(outdegree)
hist(outdegree)
hist(outdegree[outdegree[, "Zip.Code"] == 30338])
nodes %>%
filter(nodes, Zip.Code == 30338)
View(nodes)
rlang::last_error()
nodes %>%
filter(Zip.Code == 30338)
nodes %>%
filter(Zip.Code == 30338) %>%
select(Id)
#Deep dive into zip code 30338
zip_30338 <- nodes %>%
filter(Zip.Code == 30338) %>%
select(Id) #Selects nodes with zip code 30338
View(nodes)
nodes %>%
select(one_of(zip_30338))
View(nodes)
View(outdegree)
#Deep dive into zip code 30338
zip_30338 <- nodes %>%
filter(nodes$Zip.Code == 30338) %>%
select(Id) #Selects nodes with zip code 30338
View(zip_30338)
?outdegree
?sna::outdegree
?sna::degree
outdegree_30338 <- sna::degree(sociomatrix, nodes = zip_30338, cmode = 'outdegree')
View(zip_30338)
outdegree_30338 <- sna::degree(sociomatrix, nodes = unlist(zip_30338), cmode = 'outdegree')
as.data.frame(outdegree_30338) %>%
ggplot(aes(x = outdegree_30338)) +
geom_histogram(color = "black",
fill = "white") +
geom_vline(aes(xintercept = mean(outdegree)),
color = "blue",
size = 1) +
labs(title = "Outdegree Distribution of Zip Code 30338",
x = "Outdegree",
y = "Frequency")
mean(outdegree_30338)
View(outdegree_30338)
gplot(sociomatrix, label=rawIDs, vertex.col = zip) #Visaulization reveals a large scale outbreak at zip code 30338
gplot(sociomatrix, vertex.col = zip) #Visaulization reveals a large scale outbreak at zip code 30338
mean(outdegree_30338)
as.data.frame(outdegree_30338) %>%
ggplot(aes(x = outdegree_30338)) +
geom_histogram(color = "black",
fill = "white") +
geom_vline(aes(xintercept = mean(outdegree)),
color = "blue",
size = 1) +
labs(title = "Outdegree Distribution of Zip Code 30338",
x = "Outdegree",
y = "Frequency")
table(outdegree_30338)
indegree_30338 <- sna::degree(sociomatrix, nodes = unlist(zip_30338), cmode = 'indegree')
mean(indegree)
as.data.frame(indegree_30338) %>%
ggplot(aes(x = indegree_30338)) +
geom_histogram(color = "black",
fill = "white") +
geom_vline(aes(xintercept = mean(indegree_30338)),
color = "blue",
size = 1) +
labs(title = "Outdegree Distribution of Zip Code 30338",
x = "Outdegree",
y = "Frequency")
as.data.frame(outdegree_30338) %>%
ggplot(aes(x = outdegree_30338)) +
geom_histogram(color = "black",
fill = "white") +
geom_vline(aes(xintercept = mean(outdegree_30338)),
color = "blue",
size = 1) +
labs(title = "Outdegree Distribution of Zip Code 30338",
x = "Outdegree",
y = "Frequency")
sociomatrixNA <- sociomatrix
sociomatrixNA[sociomatrixNA = 0] <- NA
View(sociomatrixNA)
table(sociomatrixNA)
#Make zip code attribute numeric
zipref <- rep(0, length.out = N)
zipref[nodes[, 'Zip.Code'] == 30306] <- 1
zipref[nodes[, 'Zip.Code'] == 30324] <- 2
zipref[nodes[, 'Zip.Code'] == 30329] <- 3
zipref[nodes[, 'Zip.Code'] == 30338] <- 4
zipref[nodes[, 'Zip.Code'] == 30340] <- 5
zipref[nodes[, 'Zip.Code'] == 30341] <- 6
zipref[nodes[, 'Zip.Code'] == 30602] <- 7
zipref[nodes[, 'Zip.Code'] == 30605] <- 8
zipref[nodes[, 'Zip.Code'] == 32606] <- 9
zipref[nodes[, 'Zip.Code'] == 35064] <- 10
zipref[nodes[, 'Zip.Code'] == 37116] <- 11
View(zipref)
zipref[nodes[, 'Zip.Code'] == NA] <- 0
table(zipref)
zipref[is.na(nodes[, 'Zip.Code'])] <- 0
table(zipref)
alter_zip <- t(t(sociomatrixNA) * zipref)
View(alter_zip)
ego_zip <- sociomatrix * zipref
# now compare ego's value to alter's value to see if they match exactly
ego_zip==alter_zip  # trues and falses when ties exist; NAs if no tie
table(ego_zip==alter_zip)  # Note: each tie counted twice
rowSums(ego_zip==alter_zip, na.rm=T)  # this gives us the number of alters who are similar
rowSums(ego_zip==alters_zip, na.rm=T) / rowSums(sociomatrix)  # and here is the proportion similar
rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix)  # and here is the proportion similar
mean(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix), na.rm=T)  # mean proportion similar
hist(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix))
# what would we get by chance?
# permute attribute and recalculate, several times
# - percent similar on categorical attribute (race)
nPerms <- 10000
sims <- rep(0,nPerms)
for (i in 1:nPerms) {
altersZipPerm <- t(t(sociomatrixNA) * sample(zipref, N))   # the sample function effectively permutes the race vector
sims[i] <- mean(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix), na.rm=T)  # save mean similarity
}
mean(sims)   # proportion of alters similar expected by chance
(obsSim <- mean(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix), na.rm=T))  # observed proportion similar
hist(sims, xlim=c(min(sims, obsSim),max(sims,obsSim)))
hist(sims, xlim=c(min(sims, obsSim),max(sims,obsSim)))
mean(obsSim < sims)   #  prop. of tests where observed similarity fell below expected (rare)
mean(obsSim > sims)   #  prop. of tests where observed similarity was greater than expected (most of the time)
#Load packages
library(pacman)
pacman::p_load(ggplot2,
sna,
statnet,
RSiena,
psych,
car,
stringr,
gdata,
cluster,
reshape2,
dplyr,
openxlsx,
gridExtra,
influenceR,
igraph,
cowplot,
ggpubr,
magick,
ergMargins,
tnet,
tidyverse)
# examine the sociomatrix
table(mat, useNA='always')  # are the number of ties what you expect?
gplot(sociomatrix, vertex.col = race)
gplot(sociomatrix, vertex.col = gender)
gplot(sociomatrix, vertex.col = race)
as.data.frame(outdegree) %>%
ggplot(aes(x = outdegree)) +
geom_histogram(color = "black",
fill = "white") +
geom_vline(aes(xintercept = mean(outdegree)),
color = "blue",
size = 1) +
labs(title = "Outdegree Distribution",
x = "Outdegree",
y = "Frequency")
gplot(sociomatrix, vertex.col = race)
table(nodes$gender)
table(nodes$race.ethnicity)
gplot(sociomatrix, vertex.col = gender)
as.data.frame(outdegree) %>%
ggplot(aes(x = outdegree)) +
geom_histogram(color = "black",
fill = "white") +
geom_vline(aes(xintercept = mean(outdegree)),
color = "blue",
size = 1) +
labs(title = "Outdegree Distribution",
x = "Outdegree",
y = "Frequency")
mean(indegree)
gplot(sociomatrix, vertex.col = zip) #Visaulization reveals a large scale outbreak at zip code 30338
mean(outdegree_30338) #R0 of 0.93 (the infection should be dying down???)
as.data.frame(outdegree_30338) %>%
ggplot(aes(x = outdegree_30338)) +
geom_histogram(color = "black",
fill = "white") +
geom_vline(aes(xintercept = mean(outdegree_30338)),
color = "blue",
size = 1) +
labs(title = "Outdegree Distribution of Zip Code 30338",
x = "Outdegree",
y = "Frequency")
sociomatrixNA <- sociomatrix
sociomatrixNA[sociomatrixNA = 0] <- NA
View(sociomatrixNA)
sociomatrixNA[sociomatrixNA == 0] <- NA
View(sociomatrixNA)
#Make zip code attribute numeric
zipref <- rep(0, length.out = N)
zipref[nodes[, 'Zip.Code'] == 30306] <- 1
zipref[nodes[, 'Zip.Code'] == 30324] <- 2
zipref[nodes[, 'Zip.Code'] == 30329] <- 3
zipref[nodes[, 'Zip.Code'] == 30338] <- 4
zipref[nodes[, 'Zip.Code'] == 30340] <- 5
zipref[nodes[, 'Zip.Code'] == 30341] <- 6
zipref[nodes[, 'Zip.Code'] == 30602] <- 7
zipref[nodes[, 'Zip.Code'] == 30605] <- 8
zipref[nodes[, 'Zip.Code'] == 32606] <- 9
zipref[nodes[, 'Zip.Code'] == 35064] <- 10
zipref[nodes[, 'Zip.Code'] == 37116] <- 11
zipref[is.na(nodes[, 'Zip.Code'])] <- 0
alter_zip <- t(t(sociomatrixNA) * zipref)
ego_zip <- sociomatrix * zipref
View(ego_zip)
dim(sociomatrixNA)
dim(zipref)
#Make zip code attribute numeric
zipref <- rep(0, length.out = N)
zipref[nodes[, 'Zip.Code'] == 30306] <- 1
zipref[nodes[, 'Zip.Code'] == 30324] <- 2
zipref[nodes[, 'Zip.Code'] == 30329] <- 3
zipref[nodes[, 'Zip.Code'] == 30338] <- 4
zipref[nodes[, 'Zip.Code'] == 30340] <- 5
zipref[nodes[, 'Zip.Code'] == 30341] <- 6
zipref[nodes[, 'Zip.Code'] == 30602] <- 7
zipref[nodes[, 'Zip.Code'] == 30605] <- 8
zipref[nodes[, 'Zip.Code'] == 32606] <- 9
zipref[nodes[, 'Zip.Code'] == 35064] <- 10
zipref[nodes[, 'Zip.Code'] == 37116] <- 11
zipref[is.na(nodes[, 'Zip.Code'])] <- 0
#Make zip code attribute numeric
zipref <- rep(0, length.out = N)
zipref[nodes[, 'Zip.Code'] == 30306] <- 1
zipref[nodes[, 'Zip.Code'] == 30324] <- 2
zipref[nodes[, 'Zip.Code'] == 30329] <- 3
zipref[nodes[, 'Zip.Code'] == 30338] <- 4
zipref[nodes[, 'Zip.Code'] == 30340] <- 5
zipref[nodes[, 'Zip.Code'] == 30341] <- 6
zipref[nodes[, 'Zip.Code'] == 30602] <- 7
zipref[nodes[, 'Zip.Code'] == 30605] <- 8
zipref[nodes[, 'Zip.Code'] == 32606] <- 9
zipref[nodes[, 'Zip.Code'] == 35064] <- 10
zipref[nodes[, 'Zip.Code'] == 37116] <- 11
zipref[is.na(nodes[, 'Zip.Code'])] <- 0
View(zipref)
View(nodes)
dim(sociomatrixNA)
( N <- length(rawIDs) )          # check that this is the number of nodes you expected
View(rawIDs)
nodes <- nodes %>%
filter(ID != 55 | ID != 126)
pacman::p_load(ggplot2,
sna,
statnet,
RSiena,
psych,
car,
stringr,
gdata,
cluster,
reshape2,
dplyr,
openxlsx,
gridExtra,
influenceR,
igraph,
cowplot,
ggpubr,
magick,
ergMargins,
tnet,
tidyverse)
nodes <- nodes %>%
filter(ID != 55 | ID != 126)
nodes <- dplyr::filter(nodes, nodes$Id != 55 | nodes$Id != 126)
View(nodes)
nodes <- dplyr::filter(nodes, nodes$Id != 55 | nodes$Id != 126)
nodes <- read.csv('nodeList_covidDummy.csv')
nodes <- dplyr::filter(nodes, nodes$Id != 55 | nodes$Id != 126)
nodes <- nodes[!(nodes$Id == 55) | nodes$Id == 126]
nodes <- nodes[!(nodes$Id == 55 | nodes$Id == 126),]
#Make zip code attribute numeric
zipref <- rep(0, length.out = N)
zipref[nodes[, 'Zip.Code'] == 30306] <- 1
zipref[nodes[, 'Zip.Code'] == 30324] <- 2
zipref[nodes[, 'Zip.Code'] == 30329] <- 3
zipref[nodes[, 'Zip.Code'] == 30338] <- 4
zipref[nodes[, 'Zip.Code'] == 30340] <- 5
zipref[nodes[, 'Zip.Code'] == 30341] <- 6
zipref[nodes[, 'Zip.Code'] == 30602] <- 7
zipref[nodes[, 'Zip.Code'] == 30605] <- 8
zipref[nodes[, 'Zip.Code'] == 32606] <- 9
zipref[nodes[, 'Zip.Code'] == 35064] <- 10
zipref[nodes[, 'Zip.Code'] == 37116] <- 11
zipref[is.na(nodes[, 'Zip.Code'])] <- 0
alter_zip <- t(t(sociomatrixNA) * zipref)
ego_zip <- sociomatrix * zipref
# now compare ego's value to alter's value to see if they match exactly
ego_zip==alter_zip  # trues and falses when ties exist; NAs if no tie
table(ego_zip==alter_zip)  # Note: each tie counted twice
rowSums(ego_zip==alter_zip, na.rm=T)  # this gives us the number of alters who are similar
rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix)  # and here is the proportion similar
mean(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix), na.rm=T)  # mean proportion similar
hist(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix))
# what would we get by chance?
# permute attribute and recalculate, several times
# - percent similar on categorical attribute (race)
nPerms <- 10000
sims <- rep(0,nPerms)
for (i in 1:nPerms) {
altersZipPerm <- t(t(sociomatrixNA) * sample(zipref, N))   # the sample function effectively permutes the race vector
sims[i] <- mean(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix), na.rm=T)  # save mean similarity
}
mean(sims)   # proportion of alters similar expected by chance
(obsSim <- mean(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix), na.rm=T))  # observed proportion similar
hist(sims, xlim=c(min(sims, obsSim),max(sims,obsSim)))
abline(v=obsSim, col='red', lwd=2)
mean(obsSim < sims)   #  prop. of tests where observed similarity fell below expected (rare)
mean(obsSim > sims)   #  prop. of tests where observed similarity was greater than expected (most of the time)
# now compare ego's value to alter's value to see if they match exactly
ego_zip==alter_zip  # trues and falses when ties exist; NAs if no tie
table(ego_zip==alter_zip)  # Note: each tie counted twice
rowSums(ego_zip==alter_zip, na.rm=T)  # this gives us the number of alters who are similar
rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix)  # and here is the proportion similar
mean(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix), na.rm=T)  # mean proportion similar
hist(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix))
mean(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix), na.rm=T)  # mean proportion similar
mean_rowsums <- mean(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix), na.rm=T)  # mean proportion similar
abline(v = mean_rowsums, col = 'blue', lwd = 2)
altersZipPerm <- t(t(sociomatrixNA) * sample(zipref, N))   # the sample function effectively permutes the zip code vector
sims[i] <- mean(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix), na.rm=T)  # save mean similarity
for (i in 1:nPerms) {
altersZipPerm <- t(t(sociomatrixNA) * sample(zipref, N))   # the sample function effectively permutes the zip code vector
sims[i] <- mean(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix), na.rm=T)  # save mean similarity
}
nPerms <- 10000
sims <- rep(0,nPerms)
for (i in 1:nPerms) {
altersZipPerm <- t(t(sociomatrixNA) * sample(zipref, N))   # the sample function effectively permutes the zip code vector
sims[i] <- mean(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix), na.rm=T)  # save mean similarity
}
mean(sims)   # proportion of alters similar expected by chance
(obsSim <- mean(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix), na.rm=T))  # observed proportion similar
hist(sims, xlim=c(min(sims, obsSim),max(sims,obsSim)))
abline(v=obsSim, col='red', lwd=2)
mean(obsSim < sims)   #  prop. of tests where observed similarity fell below expected (rare)
mean(obsSim > sims)   #  prop. of tests where observed similarity was greater than expected (most of the time)
table(ego_zip==alter_zip)  # Note: each tie counted twice
race <- rep("NA", length.out = N)
race[nodes[, 'race.ethnicity'] == 'White'] <- 'white'
race[nodes[, 'race.ethnicity'] == 'Black'] <- 'gray50'
race[nodes[, 'race.ethnicity'] == 'NA'] <- 'gray90'
gender <- rep("NA", length.out = N)
gender[nodes[, 'gender'] == 'male'] <- 'green'
gender[nodes[, 'gender'] == 'female'] <- 'yellow'
gender[nodes[, 'gender'] == 'NA'] <- 'red'
table(ego_zip==alter_zip)  # Note: each tie counted twice
rowSums(ego_zip==alter_zip, na.rm=T)  # this gives us the number of alters who are similar
rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix)  # and here is the proportion similar
mean_rowsums <- mean(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix), na.rm=T)  # mean proportion similar
hist(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix))
abline(v = mean_rowsums, col = 'blue', lwd = 2)
# now compare ego's value to alter's value to see if they match exactly
ego_zip==alter_zip  # trues and falses when ties exist; NAs if no tie
table(ego_zip==alter_zip)  # Note: each tie counted twice
rowSums(ego_zip==alter_zip, na.rm=T)  # this gives us the number of alters who are similar
rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix)  # and here is the proportion similar
mean_rowsums <- mean(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix), na.rm=T)  # mean proportion similar
hist(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix))
abline(v = mean_rowsums, col = 'blue', lwd = 2)
mean(obsSim < sims)   #  prop. of tests where observed similarity fell below expected (rare)
mean(obsSim > sims)   #  prop. of tests where observed similarity was greater than expected (most of the time)
?samplw
?sample
View(sims)
mean(sims)   # proportion of alters similar expected by chance
(obsSim <- mean(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix), na.rm=T))  # observed proportion similar
hist(sims, xlim=c(min(sims, obsSim), max(sims,obsSim)))
abline(v=obsSim, col='red', lwd=2)
altersZipPerm <- t(t(sociomatrix) * sample(zipref, N))   # the sample function effectively permutes the zip code vector
mean(sims)   # proportion of alters similar expected by chance
(obsSim <- mean(rowSums(ego_zip==alter_zip, na.rm=T) / rowSums(sociomatrix), na.rm=T))  # observed proportion similar
hist(sims, xlim=c(min(sims, obsSim), max(sims,obsSim)))
abline(v=obsSim, col='red', lwd=2)
mean(obsSim < sims)   #  prop. of tests where observed similarity fell below expected (rare)
mean(obsSim > sims)   #  prop. of tests where observed similarity was greater than expected (most of the time)
altersZipPerm <- t(t(sociomatrixNA) * sample(zipref, N))   # the sample function effectively permutes the zip code vector
